'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.ObstacleInfo = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var header_js_1 = require('../../fb/std-msgs/header.cjs');
var ObstacleInfo = /** @class */ (function () {
  function ObstacleInfo() {
    this.bb = null;
    this.bb_pos = 0;
  }
  ObstacleInfo.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  ObstacleInfo.getRootAsObstacleInfo = function (bb, obj) {
    return (obj || new ObstacleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ObstacleInfo.getSizePrefixedRootAsObstacleInfo = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ObstacleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ObstacleInfo.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  ObstacleInfo.prototype.header = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new header_js_1.Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  ObstacleInfo.prototype.down = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.front = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.right = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.back = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.left = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.up = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  ObstacleInfo.prototype.healtNotWorking = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.healtWorking = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 1;
  };
  ObstacleInfo.prototype.downHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.frontHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 26);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.rightHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.backHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.leftHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.prototype.upHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ObstacleInfo.startObstacleInfo = function (builder) {
    builder.startObject(16);
  };
  ObstacleInfo.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  ObstacleInfo.addHeader = function (builder, headerOffset) {
    builder.addFieldOffset(1, headerOffset, 0);
  };
  ObstacleInfo.addDown = function (builder, down) {
    builder.addFieldFloat32(2, down, 0.0);
  };
  ObstacleInfo.addFront = function (builder, front) {
    builder.addFieldFloat32(3, front, 0.0);
  };
  ObstacleInfo.addRight = function (builder, right) {
    builder.addFieldFloat32(4, right, 0.0);
  };
  ObstacleInfo.addBack = function (builder, back) {
    builder.addFieldFloat32(5, back, 0.0);
  };
  ObstacleInfo.addLeft = function (builder, left) {
    builder.addFieldFloat32(6, left, 0.0);
  };
  ObstacleInfo.addUp = function (builder, up) {
    builder.addFieldFloat32(7, up, 0.0);
  };
  ObstacleInfo.addHealtNotWorking = function (builder, healtNotWorking) {
    builder.addFieldInt8(8, healtNotWorking, 0);
  };
  ObstacleInfo.addHealtWorking = function (builder, healtWorking) {
    builder.addFieldInt8(9, healtWorking, 1);
  };
  ObstacleInfo.addDownHealth = function (builder, downHealth) {
    builder.addFieldInt8(10, downHealth, 0);
  };
  ObstacleInfo.addFrontHealth = function (builder, frontHealth) {
    builder.addFieldInt8(11, frontHealth, 0);
  };
  ObstacleInfo.addRightHealth = function (builder, rightHealth) {
    builder.addFieldInt8(12, rightHealth, 0);
  };
  ObstacleInfo.addBackHealth = function (builder, backHealth) {
    builder.addFieldInt8(13, backHealth, 0);
  };
  ObstacleInfo.addLeftHealth = function (builder, leftHealth) {
    builder.addFieldInt8(14, leftHealth, 0);
  };
  ObstacleInfo.addUpHealth = function (builder, upHealth) {
    builder.addFieldInt8(15, upHealth, 0);
  };
  ObstacleInfo.endObstacleInfo = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  return ObstacleInfo;
})();
exports.ObstacleInfo = ObstacleInfo;
