'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.CompressedImage = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var header_js_1 = require('../../fb/std-msgs/header.cjs');
var CompressedImage = /** @class */ (function () {
  function CompressedImage() {
    this.bb = null;
    this.bb_pos = 0;
  }
  CompressedImage.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  CompressedImage.getRootAsCompressedImage = function (bb, obj) {
    return (obj || new CompressedImage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  CompressedImage.getSizePrefixedRootAsCompressedImage = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new CompressedImage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  CompressedImage.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  CompressedImage.prototype.header = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new header_js_1.Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  CompressedImage.prototype.format = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  CompressedImage.prototype.data = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
  };
  CompressedImage.prototype.dataLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  CompressedImage.prototype.dataArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset
      ? new Uint8Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  CompressedImage.startCompressedImage = function (builder) {
    builder.startObject(4);
  };
  CompressedImage.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  CompressedImage.addHeader = function (builder, headerOffset) {
    builder.addFieldOffset(1, headerOffset, 0);
  };
  CompressedImage.addFormat = function (builder, formatOffset) {
    builder.addFieldOffset(2, formatOffset, 0);
  };
  CompressedImage.addData = function (builder, dataOffset) {
    builder.addFieldOffset(3, dataOffset, 0);
  };
  CompressedImage.createDataVector = function (builder, data) {
    builder.startVector(1, data.length, 1);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]);
    }
    return builder.endVector();
  };
  CompressedImage.startDataVector = function (builder, numElems) {
    builder.startVector(1, numElems, 1);
  };
  CompressedImage.endCompressedImage = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // header
    builder.requiredField(offset, 8); // format
    builder.requiredField(offset, 10); // data
    return offset;
  };
  return CompressedImage;
})();
exports.CompressedImage = CompressedImage;
