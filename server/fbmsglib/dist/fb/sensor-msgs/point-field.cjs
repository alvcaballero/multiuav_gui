'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.PointField = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var PointField = /** @class */ (function () {
  function PointField() {
    this.bb = null;
    this.bb_pos = 0;
  }
  PointField.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  PointField.getRootAsPointField = function (bb, obj) {
    return (obj || new PointField()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  PointField.getSizePrefixedRootAsPointField = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new PointField()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  PointField.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  PointField.prototype.name = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  PointField.prototype.offset = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
  };
  PointField.prototype.datatype = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  PointField.prototype.count = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
  };
  PointField.startPointField = function (builder) {
    builder.startObject(5);
  };
  PointField.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  PointField.addName = function (builder, nameOffset) {
    builder.addFieldOffset(1, nameOffset, 0);
  };
  PointField.addOffset = function (builder, offset) {
    builder.addFieldInt32(2, offset, 0);
  };
  PointField.addDatatype = function (builder, datatype) {
    builder.addFieldInt8(3, datatype, 0);
  };
  PointField.addCount = function (builder, count) {
    builder.addFieldInt32(4, count, 0);
  };
  PointField.endPointField = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // name
    return offset;
  };
  PointField.createPointField = function (builder, _MetadataOffset, nameOffset, offset, datatype, count) {
    PointField.startPointField(builder);
    PointField.add_Metadata(builder, _MetadataOffset);
    PointField.addName(builder, nameOffset);
    PointField.addOffset(builder, offset);
    PointField.addDatatype(builder, datatype);
    PointField.addCount(builder, count);
    return PointField.endPointField(builder);
  };
  return PointField;
})();
exports.PointField = PointField;
