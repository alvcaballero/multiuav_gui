'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.BatteryState = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var header_js_1 = require('../../fb/std-msgs/header.cjs');
var BatteryState = /** @class */ (function () {
  function BatteryState() {
    this.bb = null;
    this.bb_pos = 0;
  }
  BatteryState.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  BatteryState.getRootAsBatteryState = function (bb, obj) {
    return (obj || new BatteryState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  BatteryState.getSizePrefixedRootAsBatteryState = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new BatteryState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  BatteryState.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  BatteryState.prototype.header = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new header_js_1.Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  BatteryState.prototype.voltage = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.current = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.charge = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.capacity = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.designCapacity = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.percentage = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  BatteryState.prototype.powerSupplyStatus = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
  };
  BatteryState.prototype.powerSupplyHealth = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
  };
  BatteryState.prototype.powerSupplyTechnology = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
  };
  BatteryState.prototype.present = function () {
    var offset = this.bb.__offset(this.bb_pos, 26);
    return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
  };
  BatteryState.prototype.cellVoltage = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  BatteryState.prototype.cellVoltageLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  BatteryState.prototype.cellVoltageArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  BatteryState.prototype.cellTemperature = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  BatteryState.prototype.cellTemperatureLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  BatteryState.prototype.cellTemperatureArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  BatteryState.startBatteryState = function (builder) {
    builder.startObject(14);
  };
  BatteryState.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  BatteryState.addHeader = function (builder, headerOffset) {
    builder.addFieldOffset(1, headerOffset, 0);
  };
  BatteryState.addVoltage = function (builder, voltage) {
    builder.addFieldFloat32(2, voltage, 0.0);
  };
  BatteryState.addCurrent = function (builder, current) {
    builder.addFieldFloat32(3, current, 0.0);
  };
  BatteryState.addCharge = function (builder, charge) {
    builder.addFieldFloat32(4, charge, 0.0);
  };
  BatteryState.addCapacity = function (builder, capacity) {
    builder.addFieldFloat32(5, capacity, 0.0);
  };
  BatteryState.addDesignCapacity = function (builder, designCapacity) {
    builder.addFieldFloat32(6, designCapacity, 0.0);
  };
  BatteryState.addPercentage = function (builder, percentage) {
    builder.addFieldFloat32(7, percentage, 0.0);
  };
  BatteryState.addPowerSupplyStatus = function (builder, powerSupplyStatus) {
    builder.addFieldInt8(8, powerSupplyStatus, 0);
  };
  BatteryState.addPowerSupplyHealth = function (builder, powerSupplyHealth) {
    builder.addFieldInt8(9, powerSupplyHealth, 0);
  };
  BatteryState.addPowerSupplyTechnology = function (builder, powerSupplyTechnology) {
    builder.addFieldInt8(10, powerSupplyTechnology, 0);
  };
  BatteryState.addPresent = function (builder, present) {
    builder.addFieldInt8(11, +present, +false);
  };
  BatteryState.addCellVoltage = function (builder, cellVoltageOffset) {
    builder.addFieldOffset(12, cellVoltageOffset, 0);
  };
  BatteryState.createCellVoltageVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  BatteryState.startCellVoltageVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  BatteryState.addCellTemperature = function (builder, cellTemperatureOffset) {
    builder.addFieldOffset(13, cellTemperatureOffset, 0);
  };
  BatteryState.createCellTemperatureVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  BatteryState.startCellTemperatureVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  BatteryState.endBatteryState = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // header
    builder.requiredField(offset, 28); // cell_voltage
    builder.requiredField(offset, 30); // cell_temperature
    return offset;
  };
  return BatteryState;
})();
exports.BatteryState = BatteryState;
