'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.LaserScan = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var header_js_1 = require('../../fb/std-msgs/header.cjs');
var LaserScan = /** @class */ (function () {
  function LaserScan() {
    this.bb = null;
    this.bb_pos = 0;
  }
  LaserScan.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  LaserScan.getRootAsLaserScan = function (bb, obj) {
    return (obj || new LaserScan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  LaserScan.getSizePrefixedRootAsLaserScan = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LaserScan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  LaserScan.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  LaserScan.prototype.header = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new header_js_1.Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  LaserScan.prototype.angleMin = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.angleMax = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.angleIncrement = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.timeIncrement = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.scanTime = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.rangeMin = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.rangeMax = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  LaserScan.prototype.ranges = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  LaserScan.prototype.rangesLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  LaserScan.prototype.rangesArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  LaserScan.prototype.intensities = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  LaserScan.prototype.intensitiesLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  LaserScan.prototype.intensitiesArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  LaserScan.startLaserScan = function (builder) {
    builder.startObject(11);
  };
  LaserScan.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  LaserScan.addHeader = function (builder, headerOffset) {
    builder.addFieldOffset(1, headerOffset, 0);
  };
  LaserScan.addAngleMin = function (builder, angleMin) {
    builder.addFieldFloat32(2, angleMin, 0.0);
  };
  LaserScan.addAngleMax = function (builder, angleMax) {
    builder.addFieldFloat32(3, angleMax, 0.0);
  };
  LaserScan.addAngleIncrement = function (builder, angleIncrement) {
    builder.addFieldFloat32(4, angleIncrement, 0.0);
  };
  LaserScan.addTimeIncrement = function (builder, timeIncrement) {
    builder.addFieldFloat32(5, timeIncrement, 0.0);
  };
  LaserScan.addScanTime = function (builder, scanTime) {
    builder.addFieldFloat32(6, scanTime, 0.0);
  };
  LaserScan.addRangeMin = function (builder, rangeMin) {
    builder.addFieldFloat32(7, rangeMin, 0.0);
  };
  LaserScan.addRangeMax = function (builder, rangeMax) {
    builder.addFieldFloat32(8, rangeMax, 0.0);
  };
  LaserScan.addRanges = function (builder, rangesOffset) {
    builder.addFieldOffset(9, rangesOffset, 0);
  };
  LaserScan.createRangesVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  LaserScan.startRangesVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  LaserScan.addIntensities = function (builder, intensitiesOffset) {
    builder.addFieldOffset(10, intensitiesOffset, 0);
  };
  LaserScan.createIntensitiesVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  LaserScan.startIntensitiesVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  LaserScan.endLaserScan = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // header
    builder.requiredField(offset, 22); // ranges
    builder.requiredField(offset, 24); // intensities
    return offset;
  };
  return LaserScan;
})();
exports.LaserScan = LaserScan;
