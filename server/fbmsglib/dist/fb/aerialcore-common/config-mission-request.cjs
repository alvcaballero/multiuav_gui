'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.ConfigMissionRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var nav_sat_fix_js_1 = require('../../fb/sensor-msgs/nav-sat-fix.cjs');
var ConfigMissionRequest = /** @class */ (function () {
  function ConfigMissionRequest() {
    this.bb = null;
    this.bb_pos = 0;
  }
  ConfigMissionRequest.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  ConfigMissionRequest.getRootAsConfigMissionRequest = function (bb, obj) {
    return (obj || new ConfigMissionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ConfigMissionRequest.getSizePrefixedRootAsConfigMissionRequest = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ConfigMissionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ConfigMissionRequest.prototype.uavId = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  ConfigMissionRequest.prototype.missionId = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  ConfigMissionRequest.prototype.missionType = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.waypoint = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset
      ? (obj || new nav_sat_fix_js_1.NavSatFix()).__init(
          this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4),
          this.bb
        )
      : null;
  };
  ConfigMissionRequest.prototype.waypointLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.radius = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  ConfigMissionRequest.prototype.maxVel = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  ConfigMissionRequest.prototype.idleVel = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  ConfigMissionRequest.prototype.yaw = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  ConfigMissionRequest.prototype.yawLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.yawArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  ConfigMissionRequest.prototype.gimbalPitch = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  ConfigMissionRequest.prototype.gimbalPitchLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.gimbalPitchArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  ConfigMissionRequest.prototype.speed = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  ConfigMissionRequest.prototype.speedLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.speedArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  ConfigMissionRequest.prototype.yawMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.traceMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 26);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.gimbalPitchMode = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.finishAction = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.commandList = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  ConfigMissionRequest.prototype.commandListLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.commandListArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  ConfigMissionRequest.prototype.commandParameter = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  };
  ConfigMissionRequest.prototype.commandParameterLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  ConfigMissionRequest.prototype.commandParameterArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset
      ? new Float32Array(
          this.bb.bytes().buffer,
          this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset),
          this.bb.__vector_len(this.bb_pos + offset)
        )
      : null;
  };
  ConfigMissionRequest.startConfigMissionRequest = function (builder) {
    builder.startObject(16);
  };
  ConfigMissionRequest.addUavId = function (builder, uavIdOffset) {
    builder.addFieldOffset(0, uavIdOffset, 0);
  };
  ConfigMissionRequest.addMissionId = function (builder, missionIdOffset) {
    builder.addFieldOffset(1, missionIdOffset, 0);
  };
  ConfigMissionRequest.addMissionType = function (builder, missionType) {
    builder.addFieldInt8(2, missionType, 0);
  };
  ConfigMissionRequest.addWaypoint = function (builder, waypointOffset) {
    builder.addFieldOffset(3, waypointOffset, 0);
  };
  ConfigMissionRequest.createWaypointVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startWaypointVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.addRadius = function (builder, radius) {
    builder.addFieldFloat64(4, radius, 0.0);
  };
  ConfigMissionRequest.addMaxVel = function (builder, maxVel) {
    builder.addFieldFloat64(5, maxVel, 0.0);
  };
  ConfigMissionRequest.addIdleVel = function (builder, idleVel) {
    builder.addFieldFloat64(6, idleVel, 0.0);
  };
  ConfigMissionRequest.addYaw = function (builder, yawOffset) {
    builder.addFieldOffset(7, yawOffset, 0);
  };
  ConfigMissionRequest.createYawVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startYawVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.addGimbalPitch = function (builder, gimbalPitchOffset) {
    builder.addFieldOffset(8, gimbalPitchOffset, 0);
  };
  ConfigMissionRequest.createGimbalPitchVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startGimbalPitchVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.addSpeed = function (builder, speedOffset) {
    builder.addFieldOffset(9, speedOffset, 0);
  };
  ConfigMissionRequest.createSpeedVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startSpeedVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.addYawMode = function (builder, yawMode) {
    builder.addFieldInt8(10, yawMode, 0);
  };
  ConfigMissionRequest.addTraceMode = function (builder, traceMode) {
    builder.addFieldInt8(11, traceMode, 0);
  };
  ConfigMissionRequest.addGimbalPitchMode = function (builder, gimbalPitchMode) {
    builder.addFieldInt8(12, gimbalPitchMode, 0);
  };
  ConfigMissionRequest.addFinishAction = function (builder, finishAction) {
    builder.addFieldInt8(13, finishAction, 0);
  };
  ConfigMissionRequest.addCommandList = function (builder, commandListOffset) {
    builder.addFieldOffset(14, commandListOffset, 0);
  };
  ConfigMissionRequest.createCommandListVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startCommandListVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.addCommandParameter = function (builder, commandParameterOffset) {
    builder.addFieldOffset(15, commandParameterOffset, 0);
  };
  ConfigMissionRequest.createCommandParameterVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]);
    }
    return builder.endVector();
  };
  ConfigMissionRequest.startCommandParameterVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
  };
  ConfigMissionRequest.endConfigMissionRequest = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  ConfigMissionRequest.createConfigMissionRequest = function (
    builder,
    uavIdOffset,
    missionIdOffset,
    missionType,
    waypointOffset,
    radius,
    maxVel,
    idleVel,
    yawOffset,
    gimbalPitchOffset,
    speedOffset,
    yawMode,
    traceMode,
    gimbalPitchMode,
    finishAction,
    commandListOffset,
    commandParameterOffset
  ) {
    ConfigMissionRequest.startConfigMissionRequest(builder);
    ConfigMissionRequest.addUavId(builder, uavIdOffset);
    ConfigMissionRequest.addMissionId(builder, missionIdOffset);
    ConfigMissionRequest.addMissionType(builder, missionType);
    ConfigMissionRequest.addWaypoint(builder, waypointOffset);
    ConfigMissionRequest.addRadius(builder, radius);
    ConfigMissionRequest.addMaxVel(builder, maxVel);
    ConfigMissionRequest.addIdleVel(builder, idleVel);
    ConfigMissionRequest.addYaw(builder, yawOffset);
    ConfigMissionRequest.addGimbalPitch(builder, gimbalPitchOffset);
    ConfigMissionRequest.addSpeed(builder, speedOffset);
    ConfigMissionRequest.addYawMode(builder, yawMode);
    ConfigMissionRequest.addTraceMode(builder, traceMode);
    ConfigMissionRequest.addGimbalPitchMode(builder, gimbalPitchMode);
    ConfigMissionRequest.addFinishAction(builder, finishAction);
    ConfigMissionRequest.addCommandList(builder, commandListOffset);
    ConfigMissionRequest.addCommandParameter(builder, commandParameterOffset);
    return ConfigMissionRequest.endConfigMissionRequest(builder);
  };
  return ConfigMissionRequest;
})();
exports.ConfigMissionRequest = ConfigMissionRequest;
