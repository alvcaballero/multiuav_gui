'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.PathVisualization = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var PathVisualization = /** @class */ (function () {
  function PathVisualization() {
    this.bb = null;
    this.bb_pos = 0;
  }
  PathVisualization.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  PathVisualization.getRootAsPathVisualization = function (bb, obj) {
    return (obj || new PathVisualization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  PathVisualization.getSizePrefixedRootAsPathVisualization = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new PathVisualization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  PathVisualization.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  PathVisualization.prototype.curvature = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  PathVisualization.prototype.distance = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  PathVisualization.prototype.clearance = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  PathVisualization.startPathVisualization = function (builder) {
    builder.startObject(4);
  };
  PathVisualization.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  PathVisualization.addCurvature = function (builder, curvature) {
    builder.addFieldFloat32(1, curvature, 0.0);
  };
  PathVisualization.addDistance = function (builder, distance) {
    builder.addFieldFloat32(2, distance, 0.0);
  };
  PathVisualization.addClearance = function (builder, clearance) {
    builder.addFieldFloat32(3, clearance, 0.0);
  };
  PathVisualization.endPathVisualization = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  PathVisualization.createPathVisualization = function (builder, _MetadataOffset, curvature, distance, clearance) {
    PathVisualization.startPathVisualization(builder);
    PathVisualization.add_Metadata(builder, _MetadataOffset);
    PathVisualization.addCurvature(builder, curvature);
    PathVisualization.addDistance(builder, distance);
    PathVisualization.addClearance(builder, clearance);
    return PathVisualization.endPathVisualization(builder);
  };
  return PathVisualization;
})();
exports.PathVisualization = PathVisualization;
