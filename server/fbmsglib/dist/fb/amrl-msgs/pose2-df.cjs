'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.Pose2Df = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var Pose2Df = /** @class */ (function () {
  function Pose2Df() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Pose2Df.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Pose2Df.getRootAsPose2Df = function (bb, obj) {
    return (obj || new Pose2Df()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Pose2Df.getSizePrefixedRootAsPose2Df = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Pose2Df()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Pose2Df.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  Pose2Df.prototype.x = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  Pose2Df.prototype.y = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  Pose2Df.prototype.theta = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
  };
  Pose2Df.startPose2Df = function (builder) {
    builder.startObject(4);
  };
  Pose2Df.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  Pose2Df.addX = function (builder, x) {
    builder.addFieldFloat32(1, x, 0.0);
  };
  Pose2Df.addY = function (builder, y) {
    builder.addFieldFloat32(2, y, 0.0);
  };
  Pose2Df.addTheta = function (builder, theta) {
    builder.addFieldFloat32(3, theta, 0.0);
  };
  Pose2Df.endPose2Df = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  Pose2Df.createPose2Df = function (builder, _MetadataOffset, x, y, theta) {
    Pose2Df.startPose2Df(builder);
    Pose2Df.add_Metadata(builder, _MetadataOffset);
    Pose2Df.addX(builder, x);
    Pose2Df.addY(builder, y);
    Pose2Df.addTheta(builder, theta);
    return Pose2Df.endPose2Df(builder);
  };
  return Pose2Df;
})();
exports.Pose2Df = Pose2Df;
