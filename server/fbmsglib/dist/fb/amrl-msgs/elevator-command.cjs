'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.ElevatorCommand = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var ElevatorCommand = /** @class */ (function () {
  function ElevatorCommand() {
    this.bb = null;
    this.bb_pos = 0;
  }
  ElevatorCommand.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  ElevatorCommand.getRootAsElevatorCommand = function (bb, obj) {
    return (obj || new ElevatorCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ElevatorCommand.getSizePrefixedRootAsElevatorCommand = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ElevatorCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  ElevatorCommand.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  ElevatorCommand.prototype.floorCmd = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
  };
  ElevatorCommand.prototype.holdDoor = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
  };
  ElevatorCommand.startElevatorCommand = function (builder) {
    builder.startObject(3);
  };
  ElevatorCommand.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  ElevatorCommand.addFloorCmd = function (builder, floorCmd) {
    builder.addFieldInt8(1, floorCmd, 0);
  };
  ElevatorCommand.addHoldDoor = function (builder, holdDoor) {
    builder.addFieldInt8(2, +holdDoor, +false);
  };
  ElevatorCommand.endElevatorCommand = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  ElevatorCommand.createElevatorCommand = function (builder, _MetadataOffset, floorCmd, holdDoor) {
    ElevatorCommand.startElevatorCommand(builder);
    ElevatorCommand.add_Metadata(builder, _MetadataOffset);
    ElevatorCommand.addFloorCmd(builder, floorCmd);
    ElevatorCommand.addHoldDoor(builder, holdDoor);
    return ElevatorCommand.endElevatorCommand(builder);
  };
  return ElevatorCommand;
})();
exports.ElevatorCommand = ElevatorCommand;
