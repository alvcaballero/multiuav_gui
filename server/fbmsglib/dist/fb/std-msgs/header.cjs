'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.Header = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var ros_time_js_1 = require('../../fb/ros-time.cjs');
var Header = /** @class */ (function () {
  function Header() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Header.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Header.getRootAsHeader = function (bb, obj) {
    return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Header.getSizePrefixedRootAsHeader = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Header.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  Header.prototype.seq = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
  };
  Header.prototype.stamp = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? (obj || new ros_time_js_1.RosTime()).__init(this.bb_pos + offset, this.bb) : null;
  };
  Header.prototype.frameId = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  Header.startHeader = function (builder) {
    builder.startObject(4);
  };
  Header.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  Header.addSeq = function (builder, seq) {
    builder.addFieldInt32(1, seq, 0);
  };
  Header.addStamp = function (builder, stampOffset) {
    builder.addFieldStruct(2, stampOffset, 0);
  };
  Header.addFrameId = function (builder, frameIdOffset) {
    builder.addFieldOffset(3, frameIdOffset, 0);
  };
  Header.endHeader = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 8); // stamp
    builder.requiredField(offset, 10); // frame_id
    return offset;
  };
  return Header;
})();
exports.Header = Header;
