'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.String = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var String = /** @class */ (function () {
  function String() {
    this.bb = null;
    this.bb_pos = 0;
  }
  String.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  String.getRootAsString = function (bb, obj) {
    return (obj || new String()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  String.getSizePrefixedRootAsString = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new String()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  String.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  String.prototype.data = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  };
  String.startString = function (builder) {
    builder.startObject(2);
  };
  String.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  String.addData = function (builder, dataOffset) {
    builder.addFieldOffset(1, dataOffset, 0);
  };
  String.endString = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // data
    return offset;
  };
  String.createString = function (builder, _MetadataOffset, dataOffset) {
    String.startString(builder);
    String.add_Metadata(builder, _MetadataOffset);
    String.addData(builder, dataOffset);
    return String.endString(builder);
  };
  return String;
})();
exports.String = String;
