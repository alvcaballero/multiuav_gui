'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.Pose = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var point_js_1 = require('../../fb/geometry-msgs/point.cjs');
var quaternion_js_1 = require('../../fb/geometry-msgs/quaternion.cjs');
var Pose = /** @class */ (function () {
  function Pose() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Pose.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Pose.getRootAsPose = function (bb, obj) {
    return (obj || new Pose()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Pose.getSizePrefixedRootAsPose = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Pose()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Pose.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  Pose.prototype.position = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new point_js_1.Point()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  Pose.prototype.orientation = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset
      ? (obj || new quaternion_js_1.Quaternion()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  Pose.startPose = function (builder) {
    builder.startObject(3);
  };
  Pose.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  Pose.addPosition = function (builder, positionOffset) {
    builder.addFieldOffset(1, positionOffset, 0);
  };
  Pose.addOrientation = function (builder, orientationOffset) {
    builder.addFieldOffset(2, orientationOffset, 0);
  };
  Pose.endPose = function (builder) {
    var offset = builder.endObject();
    builder.requiredField(offset, 6); // position
    builder.requiredField(offset, 8); // orientation
    return offset;
  };
  return Pose;
})();
exports.Pose = Pose;
