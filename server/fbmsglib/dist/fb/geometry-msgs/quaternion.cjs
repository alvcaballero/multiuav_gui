'use strict';
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, '__esModule', { value: true });
exports.Quaternion = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require('flatbuffers');
var msg_metadata_js_1 = require('../../fb/msg-metadata.cjs');
var Quaternion = /** @class */ (function () {
  function Quaternion() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Quaternion.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Quaternion.getRootAsQuaternion = function (bb, obj) {
    return (obj || new Quaternion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Quaternion.getSizePrefixedRootAsQuaternion = function (bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Quaternion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Quaternion.prototype._Metadata = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new msg_metadata_js_1.MsgMetadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb)
      : null;
  };
  Quaternion.prototype.x = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  Quaternion.prototype.y = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  Quaternion.prototype.z = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  Quaternion.prototype.w = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  };
  Quaternion.startQuaternion = function (builder) {
    builder.startObject(5);
  };
  Quaternion.add_Metadata = function (builder, _MetadataOffset) {
    builder.addFieldOffset(0, _MetadataOffset, 0);
  };
  Quaternion.addX = function (builder, x) {
    builder.addFieldFloat64(1, x, 0.0);
  };
  Quaternion.addY = function (builder, y) {
    builder.addFieldFloat64(2, y, 0.0);
  };
  Quaternion.addZ = function (builder, z) {
    builder.addFieldFloat64(3, z, 0.0);
  };
  Quaternion.addW = function (builder, w) {
    builder.addFieldFloat64(4, w, 0.0);
  };
  Quaternion.endQuaternion = function (builder) {
    var offset = builder.endObject();
    return offset;
  };
  Quaternion.createQuaternion = function (builder, _MetadataOffset, x, y, z, w) {
    Quaternion.startQuaternion(builder);
    Quaternion.add_Metadata(builder, _MetadataOffset);
    Quaternion.addX(builder, x);
    Quaternion.addY(builder, y);
    Quaternion.addZ(builder, z);
    Quaternion.addW(builder, w);
    return Quaternion.endQuaternion(builder);
  };
  return Quaternion;
})();
exports.Quaternion = Quaternion;
