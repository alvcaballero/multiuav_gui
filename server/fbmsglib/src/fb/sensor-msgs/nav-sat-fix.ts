// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';
import { NavSatStatus } from '../../fb/sensor-msgs/nav-sat-status.js';
import { Header } from '../../fb/std-msgs/header.js';


export class NavSatFix {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NavSatFix {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNavSatFix(bb:flatbuffers.ByteBuffer, obj?:NavSatFix):NavSatFix {
  return (obj || new NavSatFix()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNavSatFix(bb:flatbuffers.ByteBuffer, obj?:NavSatFix):NavSatFix {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NavSatFix()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

header(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

status(obj?:NavSatStatus):NavSatStatus|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new NavSatStatus()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

latitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

longitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

altitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

positionCovariance(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

positionCovarianceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

positionCovarianceArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

positionCovarianceType():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startNavSatFix(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, headerOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, statusOffset, 0);
}

static addLatitude(builder:flatbuffers.Builder, latitude:number) {
  builder.addFieldFloat64(3, latitude, 0.0);
}

static addLongitude(builder:flatbuffers.Builder, longitude:number) {
  builder.addFieldFloat64(4, longitude, 0.0);
}

static addAltitude(builder:flatbuffers.Builder, altitude:number) {
  builder.addFieldFloat64(5, altitude, 0.0);
}

static addPositionCovariance(builder:flatbuffers.Builder, positionCovarianceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, positionCovarianceOffset, 0);
}

static createPositionCovarianceVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPositionCovarianceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPositionCovarianceVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startPositionCovarianceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addPositionCovarianceType(builder:flatbuffers.Builder, positionCovarianceType:number) {
  builder.addFieldInt8(7, positionCovarianceType, 0);
}

static endNavSatFix(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // header
  builder.requiredField(offset, 8) // status
  builder.requiredField(offset, 16) // position_covariance
  return offset;
}

}
