// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';


export class PointField {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointField {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointField(bb:flatbuffers.ByteBuffer, obj?:PointField):PointField {
  return (obj || new PointField()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointField(bb:flatbuffers.ByteBuffer, obj?:PointField):PointField {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointField()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

datatype():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startPointField(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt32(2, offset, 0);
}

static addDatatype(builder:flatbuffers.Builder, datatype:number) {
  builder.addFieldInt8(3, datatype, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(4, count, 0);
}

static endPointField(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // name
  return offset;
}

static createPointField(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, offset:number, datatype:number, count:number):flatbuffers.Offset {
  PointField.startPointField(builder);
  PointField.add_Metadata(builder, _MetadataOffset);
  PointField.addName(builder, nameOffset);
  PointField.addOffset(builder, offset);
  PointField.addDatatype(builder, datatype);
  PointField.addCount(builder, count);
  return PointField.endPointField(builder);
}
}
