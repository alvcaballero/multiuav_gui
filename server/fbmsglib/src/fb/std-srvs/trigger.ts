// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';
import { TriggerRequest } from '../../fb/std-srvs/trigger-request.js';
import { TriggerResponse } from '../../fb/std-srvs/trigger-response.js';


export class Trigger {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Trigger {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrigger(bb:flatbuffers.ByteBuffer, obj?:Trigger):Trigger {
  return (obj || new Trigger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrigger(bb:flatbuffers.ByteBuffer, obj?:Trigger):Trigger {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Trigger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

request(obj?:TriggerRequest):TriggerRequest|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TriggerRequest()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

response(obj?:TriggerResponse):TriggerResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new TriggerResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTrigger(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addRequest(builder:flatbuffers.Builder, requestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestOffset, 0);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, responseOffset, 0);
}

static endTrigger(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
