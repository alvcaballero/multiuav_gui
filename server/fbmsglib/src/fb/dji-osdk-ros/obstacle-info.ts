// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';
import { Header } from '../../fb/std-msgs/header.js';


export class ObstacleInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ObstacleInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObstacleInfo(bb:flatbuffers.ByteBuffer, obj?:ObstacleInfo):ObstacleInfo {
  return (obj || new ObstacleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObstacleInfo(bb:flatbuffers.ByteBuffer, obj?:ObstacleInfo):ObstacleInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ObstacleInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

header(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

down():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

front():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

right():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

back():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

left():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

up():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

healtNotWorking():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

healtWorking():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 1;
}

downHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

frontHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

rightHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

backHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

leftHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

upHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startObstacleInfo(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, headerOffset, 0);
}

static addDown(builder:flatbuffers.Builder, down:number) {
  builder.addFieldFloat32(2, down, 0.0);
}

static addFront(builder:flatbuffers.Builder, front:number) {
  builder.addFieldFloat32(3, front, 0.0);
}

static addRight(builder:flatbuffers.Builder, right:number) {
  builder.addFieldFloat32(4, right, 0.0);
}

static addBack(builder:flatbuffers.Builder, back:number) {
  builder.addFieldFloat32(5, back, 0.0);
}

static addLeft(builder:flatbuffers.Builder, left:number) {
  builder.addFieldFloat32(6, left, 0.0);
}

static addUp(builder:flatbuffers.Builder, up:number) {
  builder.addFieldFloat32(7, up, 0.0);
}

static addHealtNotWorking(builder:flatbuffers.Builder, healtNotWorking:number) {
  builder.addFieldInt8(8, healtNotWorking, 0);
}

static addHealtWorking(builder:flatbuffers.Builder, healtWorking:number) {
  builder.addFieldInt8(9, healtWorking, 1);
}

static addDownHealth(builder:flatbuffers.Builder, downHealth:number) {
  builder.addFieldInt8(10, downHealth, 0);
}

static addFrontHealth(builder:flatbuffers.Builder, frontHealth:number) {
  builder.addFieldInt8(11, frontHealth, 0);
}

static addRightHealth(builder:flatbuffers.Builder, rightHealth:number) {
  builder.addFieldInt8(12, rightHealth, 0);
}

static addBackHealth(builder:flatbuffers.Builder, backHealth:number) {
  builder.addFieldInt8(13, backHealth, 0);
}

static addLeftHealth(builder:flatbuffers.Builder, leftHealth:number) {
  builder.addFieldInt8(14, leftHealth, 0);
}

static addUpHealth(builder:flatbuffers.Builder, upHealth:number) {
  builder.addFieldInt8(15, upHealth, 0);
}

static endObstacleInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
