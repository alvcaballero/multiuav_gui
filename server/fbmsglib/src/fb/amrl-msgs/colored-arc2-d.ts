// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';
import { Point2D } from '../../fb/amrl-msgs/point2-d.js';


export class ColoredArc2D {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ColoredArc2D {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColoredArc2D(bb:flatbuffers.ByteBuffer, obj?:ColoredArc2D):ColoredArc2D {
  return (obj || new ColoredArc2D()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColoredArc2D(bb:flatbuffers.ByteBuffer, obj?:ColoredArc2D):ColoredArc2D {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ColoredArc2D()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

center(obj?:Point2D):Point2D|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Point2D()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

radius():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

startAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

endAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

color():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startColoredArc2D(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addCenter(builder:flatbuffers.Builder, centerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, centerOffset, 0);
}

static addRadius(builder:flatbuffers.Builder, radius:number) {
  builder.addFieldFloat32(2, radius, 0.0);
}

static addStartAngle(builder:flatbuffers.Builder, startAngle:number) {
  builder.addFieldFloat32(3, startAngle, 0.0);
}

static addEndAngle(builder:flatbuffers.Builder, endAngle:number) {
  builder.addFieldFloat32(4, endAngle, 0.0);
}

static addColor(builder:flatbuffers.Builder, color:number) {
  builder.addFieldInt32(5, color, 0);
}

static endColoredArc2D(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // center
  return offset;
}

}
