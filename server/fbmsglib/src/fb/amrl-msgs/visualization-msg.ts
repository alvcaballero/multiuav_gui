// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';
import { ColoredArc2D } from '../../fb/amrl-msgs/colored-arc2-d.js';
import { ColoredLine2D } from '../../fb/amrl-msgs/colored-line2-d.js';
import { ColoredPoint2D } from '../../fb/amrl-msgs/colored-point2-d.js';
import { PathVisualization } from '../../fb/amrl-msgs/path-visualization.js';
import { Pose2Df } from '../../fb/amrl-msgs/pose2-df.js';
import { Header } from '../../fb/std-msgs/header.js';


export class VisualizationMsg {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VisualizationMsg {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVisualizationMsg(bb:flatbuffers.ByteBuffer, obj?:VisualizationMsg):VisualizationMsg {
  return (obj || new VisualizationMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVisualizationMsg(bb:flatbuffers.ByteBuffer, obj?:VisualizationMsg):VisualizationMsg {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VisualizationMsg()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

header(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ns():string|null
ns(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ns(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

particles(index: number, obj?:Pose2Df):Pose2Df|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Pose2Df()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

particlesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pathOptions(index: number, obj?:PathVisualization):PathVisualization|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PathVisualization()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pathOptionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

points(index: number, obj?:ColoredPoint2D):ColoredPoint2D|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ColoredPoint2D()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lines(index: number, obj?:ColoredLine2D):ColoredLine2D|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ColoredLine2D()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

linesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

arcs(index: number, obj?:ColoredArc2D):ColoredArc2D|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ColoredArc2D()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

arcsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVisualizationMsg(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, headerOffset, 0);
}

static addNs(builder:flatbuffers.Builder, nsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nsOffset, 0);
}

static addParticles(builder:flatbuffers.Builder, particlesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, particlesOffset, 0);
}

static createParticlesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParticlesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPathOptions(builder:flatbuffers.Builder, pathOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pathOptionsOffset, 0);
}

static createPathOptionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPathOptionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, pointsOffset, 0);
}

static createPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLines(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, linesOffset, 0);
}

static createLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addArcs(builder:flatbuffers.Builder, arcsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, arcsOffset, 0);
}

static createArcsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArcsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVisualizationMsg(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // header
  builder.requiredField(offset, 8) // ns
  builder.requiredField(offset, 10) // particles
  builder.requiredField(offset, 12) // path_options
  builder.requiredField(offset, 14) // points
  builder.requiredField(offset, 16) // lines
  builder.requiredField(offset, 18) // arcs
  return offset;
}

}
