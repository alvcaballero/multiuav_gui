// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';


export class RobofleetSubscription {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RobofleetSubscription {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRobofleetSubscription(bb:flatbuffers.ByteBuffer, obj?:RobofleetSubscription):RobofleetSubscription {
  return (obj || new RobofleetSubscription()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRobofleetSubscription(bb:flatbuffers.ByteBuffer, obj?:RobofleetSubscription):RobofleetSubscription {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RobofleetSubscription()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

topicRegex():string|null
topicRegex(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
topicRegex(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

action():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startRobofleetSubscription(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addTopicRegex(builder:flatbuffers.Builder, topicRegexOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, topicRegexOffset, 0);
}

static addAction(builder:flatbuffers.Builder, action:number) {
  builder.addFieldInt8(2, action, 0);
}

static endRobofleetSubscription(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // topic_regex
  return offset;
}

static createRobofleetSubscription(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset, topicRegexOffset:flatbuffers.Offset, action:number):flatbuffers.Offset {
  RobofleetSubscription.startRobofleetSubscription(builder);
  RobofleetSubscription.add_Metadata(builder, _MetadataOffset);
  RobofleetSubscription.addTopicRegex(builder, topicRegexOffset);
  RobofleetSubscription.addAction(builder, action);
  return RobofleetSubscription.endRobofleetSubscription(builder);
}
}
