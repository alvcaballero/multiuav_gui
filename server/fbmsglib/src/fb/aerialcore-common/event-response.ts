// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgMetadata } from '../../fb/msg-metadata.js';


export class eventResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):eventResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAseventResponse(bb:flatbuffers.ByteBuffer, obj?:eventResponse):eventResponse {
  return (obj || new eventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAseventResponse(bb:flatbuffers.ByteBuffer, obj?:eventResponse):eventResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new eventResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

_Metadata(obj?:MsgMetadata):MsgMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MsgMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

success():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

msg():string|null
msg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static starteventResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static add_Metadata(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, _MetadataOffset, 0);
}

static addSuccess(builder:flatbuffers.Builder, success:boolean) {
  builder.addFieldInt8(1, +success, +false);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, msgOffset, 0);
}

static endeventResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createeventResponse(builder:flatbuffers.Builder, _MetadataOffset:flatbuffers.Offset, success:boolean, msgOffset:flatbuffers.Offset):flatbuffers.Offset {
  eventResponse.starteventResponse(builder);
  eventResponse.add_Metadata(builder, _MetadataOffset);
  eventResponse.addSuccess(builder, success);
  eventResponse.addMsg(builder, msgOffset);
  return eventResponse.endeventResponse(builder);
}
}
